<?php

/**
 * @file
 * Integrates quickpay.dk redirected payment service.
 *
 * @author Md. Sarwar Zahan ("Sarwar Zahan", http://drupal.org/user/616810)
 *
 * Thanks to the author of drupal 6 uc_quickpay.module for inspiration.
 */
/* * *****************************************************************************
 * Hook Functions (Drupal)
 * **************************************************************************** */

/**
 * Implementation of hook_menu().
 */
function uc_quickpay_menu() {
  $items['cart/quickpay/complete'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_quickpay_complete',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_init().
 *
 * Big warning if UC isn't configured with a supported currency.
 */
function uc_quickpay_init() {
  $uc_currency_code = variable_get('uc_currency_code', '');
  Quickpay::currency_info($uc_currency_code);
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function uc_quickpay_form_uc_cart_checkout_review_form_alter(&$form, &$form_state, $form_id) {
  if (($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);
    if ($order->payment_method == 'quickpay') {
      unset($form['actions']['submit']);
      $checkout = drupal_get_form('uc_quickpay_form', $order);
      $form['#prefix'] = '<table style="display: inline; padding-top: 1em;"><tr><td>';
      $form['#suffix'] = '</td><td>' . drupal_render($checkout) . '</td></tr></table>';
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function uc_quickpay_form_uc_payment_by_order_form_alter(&$form, &$form_state, $form_id) {
  $order = uc_order_load($form['order_id']['#value']);
  if ($order->payment_method == 'quickpay') {
    $payment = _uc_quickpay_get_last_transaction($order->order_id);
    if ($payment) {
      // Default theme function doesn't render additional elements, so
      // we have to override.
      $form['#theme'] = 'uc_quickpay_by_order_form';
      $form['quickpay'] =
          array('#type' => 'fieldset',
            '#weight' => -5,
            '#title' => t('Quickpay'),
      );
      $form['quickpay']['admin'] =
          array('#type' => 'markup',
            '#value' => l(t('Quickpay administration'),
                'https://manager.quickpay.net/',
                array(
                  'attributes' => array('target' => 'uc_quickpay'),
            )));

      $balance = uc_payment_balance($order);

      // Round to 4 decimals, as UC have floating point rounding errors.
      if (round($balance, 4) != 0) {
        // Add capture
        $form['quickpay']['capture'] =
            array(
              '#type' => 'submit',
              '#value' => t('Capture'),
              '#validate' => array(),
              '#submit' => array('uc_quickpay_transaction_submit'),
              '#action' => 'capture',
        );
        // reverse
        $form['quickpay']['reverse'] =
            array(
              '#type' => 'submit',
              '#value' => t('Cancel'),
              '#validate' => array(),
              '#submit' => array('uc_quickpay_transaction_submit'),
              '#action' => 'cancel',
        );
      }
      elseif ($balance == $order->order_total) {
        // Add credit
      }
    }
  }
}

/**
 * Form submission handler.
 *
 * Captures or cancels a transaction.
 */
function uc_quickpay_transaction_submit($form, &$form_state) {
  $order = uc_order_load($form_state['values']['order_id']);
  $payment = _uc_quickpay_get_last_transaction($order->order_id);
  if (in_array($form_state['clicked_button']['#action'], array('capture', 'cancel'))) {
    if ($form_state['clicked_button']['#action'] == 'capture') {
      $order_total = variable_get('uc_fix_broken_totals', TRUE) ?
          round(uc_payment_balance($order), 2) : uc_payment_balance($order);

      $settings = quickpay_settings();
      $qp = new Quickpay($settings);
      $qptxn = $qp->transaction($payment->qp_transaction);
      $qptxn->capture($order_total);
      $action = 'Capture';
      $amount = $qptxn->amount;
      $did = 'captured';
    }
    else {
      $settings = quickpay_settings();
      $qp = new Quickpay($settings);
      $qptxn = $qp->transaction($payment->qp_transaction);
      $qptxn->cancel();
      $action = 'Cancel';
      $amount = 0;
      $did = 'cancelled';
    }

    if ($qptxn->success()) {
      drupal_set_message(t("Successfully !did.", array('!did' => $did)));
      uc_payment_enter($order->order_id, 'quickpay', $amount, 0,
          array('qp_transaction' => $qptxn->transaction),
          drupal_ucfirst($did) . ' ' . $qptxn->amount);
    }
    else {
      $error = _quickpay_qpstat_codes($qptxn->qpstat);
      drupal_set_message(t('!action failed, type: %error, %message',
              array('%error' => $error,
                '%message' => $qptxn->qpstatmsg,
                '!action' => $action)), 'error');
      uc_payment_enter($order->order_id, 'quickpay', 0, 0,
          array('qp_transaction' =>
            $qptxn->transaction),
          $action . ' failed, error: ' . $error);
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function uc_quickpay_theme() {
  return array(
    'uc_quickpay_by_order_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/* * *****************************************************************************
 * Hook Functions (Ubercart)
 * **************************************************************************** */

/**
 * Implementation of hook_uc_payment_method().
 */
function uc_quickpay_uc_payment_method() {
  $title = t("Credit card via Quickpay:") .
      theme('quickpay_accepted_cards', quickpay_cards());

  $methods[] = array(
    'id' => 'quickpay',
    'name' => t('QuickPay'),
    'title' => $title,
    'review' => t('Credit card'),
    'desc' => t('Redirect to QuickPay to pay by credit card.'),
    'callback' => 'uc_payment_method_quickpay',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implementation of hook_uc_line_item().
 */
function uc_quickpay_uc_line_item() {
  $items[] = array(
    'id' => 'qp_fee',
    'title' => t('Card transaction fee'),
    'weight' => 10,
    'default' => FALSE,
    'stored' => TRUE,
    'calculated' => TRUE,
    'display_only' => FALSE,
    'add_list' => FALSE,
  );

  return $items;
}

/* * *****************************************************************************
 * Callback Functions, Forms, and Tables
 * **************************************************************************** */

function theme_uc_quickpay_by_order_form($form) {
  $output = '<p><strong>' . t('Order total:') . '</strong> ' . drupal_render($form['order_total'])
      . '<br /><strong>' . t('Current balance:') . '</strong> '
      . drupal_render($form['balance']) . '</p>';
  $output .= '<p>' . drupal_render($form['payments']) . '</p>'
      . '<p>' . drupal_render($form['form_id'])
      . drupal_render($form['form_token']) .
      drupal_render($form['quickpay']) . '</p>';
  return $output;
}

/**
 * Callback for quickpay payment method settings.
 */
function uc_payment_method_quickpay($op, &$arg1) {
  switch ($op) {
    case 'cart-review':
      // Doing nothing, form_alter is handling this.
      return;
    case 'settings':
      $settings = quickpay_settings();
      $form = Quickpay::settings_form($settings);
      $form['uc_autocapture'] = array(
        '#type' => 'checkbox',
        '#title' => t('Autocapture non-shippable'),
        '#description' => t("Automatically capture payments on transactions that only contains products that aren't shippable. <em>WARNING</em>: Only use if all the available non-shippable products are in effect \"delivered\" on checkout (instant access subscriptions, for instance), this is a requirement from QuickPay/PBS. "),
        '#default_value' => variable_get('uc_autocapture', FALSE),
      );

      $form['uc_fix_broken_totals'] = array(
        '#type' => 'checkbox',
        '#title' => t('Work around broken UC modules'),
        '#description' => t("Some UC modules like uc_taxes and uc_discount_alt handles prices improperly, resulting in order totals with too many digits. This option rounds order totals to 2 decimal places, working around the problem in most cases. <em>WARNING</em>: This might introduce inconsistencies between the amount charged and what's displayed on the order or in the backend, depending on how other parts of UC deals with this issue."),
        '#default_value' => variable_get('uc_fix_broken_totals', TRUE),
      );
      return $form;
    case 'order-delete':
    // FIXME: Delete associated transactions?
  }
}

// Form to build the submission to quickpay.dk
function uc_quickpay_form($form, &$form_state, $order) {
  $msg_type = 'authorize';
  $description = NULL;
  $autocapture = FALSE;
  if ($msg_type == 'authorize' and variable_get('uc_autocapture', FALSE)) {
    // Autocapture is only enabled for orders where no products are shippable
    $autocapture = !uc_order_is_shippable($order);
  }
  // round to fix the problem, it's UC.
  $order_total = variable_get('uc_fix_broken_totals', TRUE) ?
      round($order->order_total, 2) : $order->order_total;

  $settings = quickpay_settings();
  try {
    $qp = new Quickpay($settings);
  } catch (Exception $e) {
    drupal_set_message(t("Quickpay payment haven't been properly configured. Consult the log for details."), 'error');
    watchdog('uc_quickpay', 'Quickpay payment failed, message: @message', array('@message' => $e->getMessage()), WATCHDOG_EMERGENCY);
    return array();
  }
  $options['continue_url'] = url('cart/quickpay/complete/' . uc_cart_get_id(), array('absolute' => TRUE));
  $options['cancel_url'] = url('cart/checkout/review', array('absolute' => TRUE));
  $form = $qp->form($order->order_id, $order_total, variable_get('uc_currency_code', ''), 'uc_quickpay', $options);
  return $form;
}

function uc_quickpay_complete($cart_id = 0) {
  $order = uc_order_load($_SESSION['cart_order']);
  if ($order === FALSE || !in_array(uc_order_status_data($order->order_status, 'state'), array('in_checkout',
        'post_checkout'))) {
    return t('An error has occurred during payment.  Please contact us to ensure your order has submitted.');
  }

  $_SESSION['last_order'] = $order->order_id;
  $output = uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));
  return $output;
}

/* * *****************************************************************************
 * Internal Functions
 * **************************************************************************** */

function _uc_quickpay_handle_transaction($order, $transaction) {
  switch (quickpay_result($transaction->qpstat)) {
    case 'success': // Accepted
      if (empty($transaction->transaction)) {
        uc_order_comment_save($order->order_id, 0,
            t('Payment failed, missing transaction id'),
            'admin');
        watchdog('quickpay',
            'No transaction id for transaction, order %order: transaction: %transaction.',
            array('%order' => $order->order_id,
              '%transaction' => print_r($transaction, TRUE)),
            WATCHDOG_EMERG,
            'admin/store/orders/' . $order->order_id);
        return NULL;
      }
      $states = _quickpay_state_codes();
      switch ($states[$transaction->state]) {
        case 'Captured':
          uc_order_comment_save($order->order_id, 0,
              t('Payment captured.'), 'admin');
          // If autocapture, transaction state is 'Captured' -- log payment
          uc_payment_enter($order->order_id,
              'quickpay', $transaction->amount, 0,
              array(
                'qp_transaction' => $transaction->transaction,
                'qp_cardtype' => $transaction->cardtype,
              ),
              'Quickpay transaction ID: ' . $transaction->transaction);
          watchdog('quickpay',
              'Payment captured for order %order.',
              array('%order' => $order->order_id), WATCHDOG_NOTICE,
              'admin/store/orders/' . $order->order_id);
          // Add transaction fee to line items, if it is specified.
          if ($transaction->fee) {
            uc_order_line_item_add($order->order_id, 'qp_fee', t('Card transaction fee'), $transaction->fee);
          }
          return TRUE;
          break;
        case 'Authorized':
          // Save for later capture
          uc_order_comment_save($order->order_id, 0,
              t('Payment authorized for !amount, using @cardtype.',
                  array('!amount' => $transaction->amount, '@cardtype' => $transaction->cardtype)),
              'admin');
          // Log a 0 amount payment, used to get the transaction id later.
          uc_payment_enter($order->order_id,
              'quickpay', 0, 0,
              array(
                'qp_transaction' => $transaction->transaction,
                'qp_cardtype' => $transaction->cardtype,
              ),
              'Authorized for ' . $transaction->amount .
              '. Transaction ID: ' . $transaction->transaction);
          watchdog('quickpay',
              'Payment authorized for order %order.',
              array('%order' => $order->order_id), WATCHDOG_NOTICE,
              'admin/store/orders/' . $order->order_id);
          // Add transaction fee to line items, if it is specified.
          if ($transaction->fee) {
            uc_order_line_item_add($order->order_id, 'qp_fee', t('Card transaction fee'), $transaction->fee);
          }
          return TRUE;
          break;
        case 'Subscribed':
          // Save for later
          uc_order_comment_save($order->order_id, 0,
              t('Subscription authorized, using @cardtype.', array('@cardtype' => $transaction->cardtype)), 'admin');
          // Log a 0 amount payment, used to get the transaction id later.
          uc_payment_enter($order->order_id,
              'quickpay', 0, 0,
              array(
                'qp_subscription' => $transaction->transaction,
                'qp_cardtype' => $transaction->cardtype,
              ),
              'Subscription created. Transaction ID: ' . $transaction->transaction);
          watchdog('quickpay',
              'Subscription authorized for order %order.',
              array('%order' => $order->order_id), WATCHDOG_NOTICE,
              'admin/store/orders/' . $order->order_id);

          // Capture a payment if autocapture is set and possible.
          $suffix = variable_get('uc_recurring_autocapture_suffix', 's');
          if (variable_get('uc_autocapture', FALSE) && !empty($suffix) && !uc_order_is_shippable($order)) {
            $order_total = variable_get('uc_fix_broken_totals', TRUE) ?
                round($order->order_total, 2) : $order->order_total;

            // The suffix is because we need a new order_id.
            $options['autocapture'] = TRUE;
            $new_transaction = $transaction->recurring($order->order_id . $suffix . '1', $order_total, variable_get('uc_currency_code', ''), $options);
            //$new_transaction = quickpay_recurring($transaction, $order->order_id . $suffix . '1', $order_total, variable_get('uc_currency_code', ''), TRUE);
            _uc_quickpay_handle_transaction($order, $new_transaction);
          }

          return TRUE;
          break;
        case 'Cancelled':
        case 'Refunded':
          // These shouldn't show up here, but for safety's sake.
          uc_order_comment_save($order->order_id, 0,
              t("Unexpected '@type' callback.", array('@type' => $transaction->state)), 'admin');
          watchdog('quickpay',
              "Unexpected '@type' callback for order %order.",
              array('%order' => $order->order_id, '@type' => $transaction->state), WATCHDOG_NOTICE,
              'admin/store/orders/' . $order->order_id);
          return TRUE;
        default:
          watchdog('quickpay',
              'Unknown state %state for order %order, transaction ignored.',
              array('%state' => $transaction->state,
                '%order' => $order->order_id,
                '%message' => $transaction->qpstatmsg),
              WATCHDOG_ERROR, 'admin/store/orders/' . $order->order_id);
          uc_order_comment_save($order->order_id, 0,
              t('Payment failed with unknown transaction msgtype %msgtype message: %message.',
                  array('%msgtype' => $transaction->msgtype,
                    '%message' => $transaction->qpstatmsg)),
              'admin');
          return NULL;
      }
      break;
    case 'failed': // Failed
      // Handled as denied.
      uc_order_comment_save($order->order_id, 0,
          t('Payment failed, message: %message.',
              array('%message' => $transaction->qpstatmsg)),
          'admin');
      watchdog('quickpay',
          'Payment failed for order %order: %message.',
          array('%order' => $order->order_id,
            '%message' => $transaction->qpstatmsg),
          WATCHDOG_NOTICE,
          'admin/store/orders/' . $order->order_id);
      return $transaction->qpstatmsg;
      break;
    case 'error': // Errors
      // All these are handled as internal error.
      watchdog('quickpay', 'Transaction code %code (%message, order %order. Something might be wrong.',
          array('%code' => $transaction->qpstat,
            '%order' => $order->order_id,
            '%message' => $transaction->qpstatmsg), WATCHDOG_ERROR,
          'admin/store/orders/' . $order->order_id);
      uc_order_comment_save($order->order_id, 0,
          t('Payment failed with error, code %code message: %message.',
              array('%code' => $transaction->qpstat,
                '%message' => $transaction->qpstatmsg)),
          'admin');
      return NULL;
      break;
    default:
      watchdog('quickpay',
          'Unknown transaction code %code for order %order, transaction ignored.',
          array('%code' => $transaction->qpstat,
            '%order' => $order->order_id,
            '%message' => $transaction->qpstatmsg),
          WATCHDOG_ERROR, 'admin/store/orders/' . $order->order_id);
      uc_order_comment_save($order->order_id, 0,
          t('Payment failed with unknown transaction code, code %code message: %message.',
              array('%code' => $transaction->qpstat,
                '%message' => $transaction->qpstatmsg)),
          'admin');
      return NULL;
  }
}

function _uc_quickpay_get_last_transaction($order_id) {
  $payments = uc_payment_load_payments($order_id);
  if (!$payments)
    return FALSE;
  // Loop backwards, in order to get the last.
  for ($i = sizeof($payments) - 1; $i >= 0; $i--) {
    $payment = drupal_unpack($payments[$i]);
    if ($payment->qp_transaction) {
      return $payment;
    }
  }
  return FALSE;
}

function _uc_quickpay_get_last_subscription($order_id) {
  $payments = uc_payment_load_payments($order_id);
  if (!$payments)
    return FALSE;
  // Loop backwards, in order to get the last.
  for ($i = sizeof($payments) - 1; $i >= 0; $i--) {
    $payment = drupal_unpack($payments[$i]);
    if ($payment->qp_subscription) {
      return $payment;
    }
  }
  return FALSE;
}

// Custom code

function quickpay_settings() {
  $settings = array();
  //Fetch the settings
  $settings['merchant'] = variable_get('merchant', '');
  $settings['secret'] = variable_get('secret', '');
  $settings['order_prefix'] = variable_get('order_prefix', '');
  $settings['language'] = variable_get('language', '');
  //$settings['accepted_cards'] = variable_get('accepted_cards', '');
  if (variable_get('method', '') == 'selected') {
    $settings['accepted_cards'] = variable_get('cards', '');
  }
  else {
    $settings['accepted_cards'] = variable_get('method', '');
  }
  $settings['method'] = variable_get('method', '');
  $settings['cards'] = variable_get('cards', '');
  $settings['test_mode'] = variable_get('test_mode', '');
  $settings['debug'] = variable_get('debug', '');

  return $settings;
}

/**
 * Implements hook_quickpay_factory().
 */
function uc_quickpay_quickpay_factory($order_id) {
  // Load order. No need for ubercart as we are fetching the settings from quickpay_settings()
  //$order = uc_order_load($order_id);
  $settings = quickpay_settings();
  return new Quickpay($settings);
}

/**
 * Implementation of hook_quickpay_callback().
 */
function uc_quickpay_quickpay_callback($order_id, $transaction) {
  if (!is_numeric($order_id)) {
    return NULL;
  }

  $order = uc_order_load($order_id);

  if ($order === FALSE || uc_order_status_data($order->order_status, 'state') != 'in_checkout') {
    if ($order === FALSE) {
      watchdog('quickpay', 'Unknown order @order_id in callback.',
          array('@order' => $order_id), WATCHDOG_ERROR);
    }
    else {
      watchdog('quickpay', 'Order @order_id has wrong state \'@state\'.',
          array('@order' => $order->order_id,
            '@state' => uc_order_status_data($order->order_status, 'state')), WATCHDOG_ERROR);
    }
    return FALSE;
  }

  if ($order->payment_method != 'quickpay') {
    watchdog('quickpay', 'Order @order_id wasn\'t a QuickPay order',
            array('@order_id' => $order->order_id), WATCHDOG_ERROR);
    drupal_access_denied();
    return;
  }

  _uc_quickpay_handle_transaction($order, $transaction);

  if ($transaction->success()) {
    // Move the transaction to post_checkout. Normally
    // uc_cart_complete_sale() does this, but we can't call it here.
    uc_order_update_status($order->order_id, uc_order_state_default('post_checkout'));
  }
}

/**
 * Returns whether a given transaction was successful or not.
 * Use this to check a transaction, it returns 'success' when successful,
 * 'failed' if the transaction was rejected, 'error' on errors and 'unknown'
 * if the transaction had an unknown return code.
 */
function quickpay_result($qpstat) {
  switch ($qpstat) {
    case '000': // Accepted
      return 'success';
      break;
    case '001': // Rejected
    case '003': // Expired
    case '008': // Bad parameters sent to quickpay (could be user error)
      // Handled as failed.
      return 'failed';
      break;
    case '002': // Communication error
    case '004': // Wrong status (not authorized)
    case '005': // Authorization expired
    case '006': // Error at PBS
    case '007': // Error at QuickPay
      // All these are handled as internal error.
      return 'error';
    default:
      return 'unknown';
  }
}

/**
 * Returns an array that maps state codes to human readable strings.
 */
function _quickpay_state_codes() {
  static $codes = array(
    1 => 'Authorized',
    2 => 'Authorize failed',
    3 => 'Captured',
    4 => 'Capture failed',
    5 => 'Cancelled',
    6 => 'Cancel failed',
    7 => 'Refunded',
    8 => 'Refund failed',
    9 => 'Subscribed',
    10 => 'Subscription failed',
  );
  return $codes;
}

/**
 * Maps qpstat status codes to human readable strings.
 *
 * Returns the string for the given code, or all known state codes if
 * no code was given.
 */
function _quickpay_qpstat_codes($code = NULL) {
  static $codes;
  if (!$codes)
    $codes = array(
      '000' => t('Approved'),
      '001' => t('Rejected by PBS'),
      '002' => t('Communication error'),
      '003' => t('Card expired'),
      '004' => t('Wrong status (not authorized)'),
      '005' => t('Authorization expired'),
      '006' => t('Error at PBS'),
      '007' => t('Error at QuickPay'),
      '008' => t('Errors in parameteres sent to QuickPay'),
    );
  if ($code) {
    return $codes[$code];
  }
  else {
    return $codes;
  }
}
